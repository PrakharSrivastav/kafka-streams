/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package org.example.model.avro;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class Measurement extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -1132285589709554961L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Measurement\",\"namespace\":\"org.example.model.avro\",\"fields\":[{\"name\":\"type\",\"type\":\"string\",\"doc\":\"type of measurement\"},{\"name\":\"value\",\"type\":\"double\",\"doc\":\"measurement value\"},{\"name\":\"device\",\"type\":\"string\",\"doc\":\"measurement value\"},{\"name\":\"timestamp\",\"type\":\"string\"}],\"version\":\"1\"}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Measurement> ENCODER =
      new BinaryMessageEncoder<Measurement>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Measurement> DECODER =
      new BinaryMessageDecoder<Measurement>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<Measurement> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<Measurement> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<Measurement>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this Measurement to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a Measurement from a ByteBuffer. */
  public static Measurement fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** type of measurement */
  @Deprecated public java.lang.CharSequence type;
  /** measurement value */
  @Deprecated public double value;
  /** measurement value */
  @Deprecated public java.lang.CharSequence device;
  @Deprecated public java.lang.CharSequence timestamp;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Measurement() {}

  /**
   * All-args constructor.
   * @param type type of measurement
   * @param value measurement value
   * @param device measurement value
   * @param timestamp The new value for timestamp
   */
  public Measurement(java.lang.CharSequence type, java.lang.Double value, java.lang.CharSequence device, java.lang.CharSequence timestamp) {
    this.type = type;
    this.value = value;
    this.device = device;
    this.timestamp = timestamp;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return type;
    case 1: return value;
    case 2: return device;
    case 3: return timestamp;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: type = (java.lang.CharSequence)value$; break;
    case 1: value = (java.lang.Double)value$; break;
    case 2: device = (java.lang.CharSequence)value$; break;
    case 3: timestamp = (java.lang.CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'type' field.
   * @return type of measurement
   */
  public java.lang.CharSequence getType() {
    return type;
  }

  /**
   * Sets the value of the 'type' field.
   * type of measurement
   * @param value the value to set.
   */
  public void setType(java.lang.CharSequence value) {
    this.type = value;
  }

  /**
   * Gets the value of the 'value' field.
   * @return measurement value
   */
  public java.lang.Double getValue() {
    return value;
  }

  /**
   * Sets the value of the 'value' field.
   * measurement value
   * @param value the value to set.
   */
  public void setValue(java.lang.Double value) {
    this.value = value;
  }

  /**
   * Gets the value of the 'device' field.
   * @return measurement value
   */
  public java.lang.CharSequence getDevice() {
    return device;
  }

  /**
   * Sets the value of the 'device' field.
   * measurement value
   * @param value the value to set.
   */
  public void setDevice(java.lang.CharSequence value) {
    this.device = value;
  }

  /**
   * Gets the value of the 'timestamp' field.
   * @return The value of the 'timestamp' field.
   */
  public java.lang.CharSequence getTimestamp() {
    return timestamp;
  }

  /**
   * Sets the value of the 'timestamp' field.
   * @param value the value to set.
   */
  public void setTimestamp(java.lang.CharSequence value) {
    this.timestamp = value;
  }

  /**
   * Creates a new Measurement RecordBuilder.
   * @return A new Measurement RecordBuilder
   */
  public static org.example.model.avro.Measurement.Builder newBuilder() {
    return new org.example.model.avro.Measurement.Builder();
  }

  /**
   * Creates a new Measurement RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Measurement RecordBuilder
   */
  public static org.example.model.avro.Measurement.Builder newBuilder(org.example.model.avro.Measurement.Builder other) {
    return new org.example.model.avro.Measurement.Builder(other);
  }

  /**
   * Creates a new Measurement RecordBuilder by copying an existing Measurement instance.
   * @param other The existing instance to copy.
   * @return A new Measurement RecordBuilder
   */
  public static org.example.model.avro.Measurement.Builder newBuilder(org.example.model.avro.Measurement other) {
    return new org.example.model.avro.Measurement.Builder(other);
  }

  /**
   * RecordBuilder for Measurement instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Measurement>
    implements org.apache.avro.data.RecordBuilder<Measurement> {

    /** type of measurement */
    private java.lang.CharSequence type;
    /** measurement value */
    private double value;
    /** measurement value */
    private java.lang.CharSequence device;
    private java.lang.CharSequence timestamp;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(org.example.model.avro.Measurement.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.type)) {
        this.type = data().deepCopy(fields()[0].schema(), other.type);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.value)) {
        this.value = data().deepCopy(fields()[1].schema(), other.value);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.device)) {
        this.device = data().deepCopy(fields()[2].schema(), other.device);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[3].schema(), other.timestamp);
        fieldSetFlags()[3] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing Measurement instance
     * @param other The existing instance to copy.
     */
    private Builder(org.example.model.avro.Measurement other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.type)) {
        this.type = data().deepCopy(fields()[0].schema(), other.type);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.value)) {
        this.value = data().deepCopy(fields()[1].schema(), other.value);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.device)) {
        this.device = data().deepCopy(fields()[2].schema(), other.device);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[3].schema(), other.timestamp);
        fieldSetFlags()[3] = true;
      }
    }

    /**
      * Gets the value of the 'type' field.
      * type of measurement
      * @return The value.
      */
    public java.lang.CharSequence getType() {
      return type;
    }

    /**
      * Sets the value of the 'type' field.
      * type of measurement
      * @param value The value of 'type'.
      * @return This builder.
      */
    public org.example.model.avro.Measurement.Builder setType(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.type = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'type' field has been set.
      * type of measurement
      * @return True if the 'type' field has been set, false otherwise.
      */
    public boolean hasType() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'type' field.
      * type of measurement
      * @return This builder.
      */
    public org.example.model.avro.Measurement.Builder clearType() {
      type = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'value' field.
      * measurement value
      * @return The value.
      */
    public java.lang.Double getValue() {
      return value;
    }

    /**
      * Sets the value of the 'value' field.
      * measurement value
      * @param value The value of 'value'.
      * @return This builder.
      */
    public org.example.model.avro.Measurement.Builder setValue(double value) {
      validate(fields()[1], value);
      this.value = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'value' field has been set.
      * measurement value
      * @return True if the 'value' field has been set, false otherwise.
      */
    public boolean hasValue() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'value' field.
      * measurement value
      * @return This builder.
      */
    public org.example.model.avro.Measurement.Builder clearValue() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'device' field.
      * measurement value
      * @return The value.
      */
    public java.lang.CharSequence getDevice() {
      return device;
    }

    /**
      * Sets the value of the 'device' field.
      * measurement value
      * @param value The value of 'device'.
      * @return This builder.
      */
    public org.example.model.avro.Measurement.Builder setDevice(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.device = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'device' field has been set.
      * measurement value
      * @return True if the 'device' field has been set, false otherwise.
      */
    public boolean hasDevice() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'device' field.
      * measurement value
      * @return This builder.
      */
    public org.example.model.avro.Measurement.Builder clearDevice() {
      device = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'timestamp' field.
      * @return The value.
      */
    public java.lang.CharSequence getTimestamp() {
      return timestamp;
    }

    /**
      * Sets the value of the 'timestamp' field.
      * @param value The value of 'timestamp'.
      * @return This builder.
      */
    public org.example.model.avro.Measurement.Builder setTimestamp(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.timestamp = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'timestamp' field has been set.
      * @return True if the 'timestamp' field has been set, false otherwise.
      */
    public boolean hasTimestamp() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'timestamp' field.
      * @return This builder.
      */
    public org.example.model.avro.Measurement.Builder clearTimestamp() {
      timestamp = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Measurement build() {
      try {
        Measurement record = new Measurement();
        record.type = fieldSetFlags()[0] ? this.type : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.value = fieldSetFlags()[1] ? this.value : (java.lang.Double) defaultValue(fields()[1]);
        record.device = fieldSetFlags()[2] ? this.device : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.timestamp = fieldSetFlags()[3] ? this.timestamp : (java.lang.CharSequence) defaultValue(fields()[3]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Measurement>
    WRITER$ = (org.apache.avro.io.DatumWriter<Measurement>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Measurement>
    READER$ = (org.apache.avro.io.DatumReader<Measurement>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
